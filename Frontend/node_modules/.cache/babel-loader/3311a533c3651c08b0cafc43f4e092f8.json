{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AAVAIG\\\\Documents\\\\webd\\\\aavaig-projects\\\\ey_techathon-2\\\\ey-website\\\\src\\\\components\\\\GeoChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from '../hooks/useResizeObserver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null);\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect();\n    console.log(width, height);\n    const projection = geoMercator().fitSize([width, height], selectedState || data).precision(100);\n    const pathGenerator = geoPath().projection(projection);\n    svg.selectAll('.state').data(data.features);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: '2rem'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GeoChart, \"M8/BC/14RHXTy/s0xYRFWOmAROQ=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["C:/Users/AAVAIG/Documents/webd/aavaig-projects/ey_techathon-2/ey-website/src/components/GeoChart.js"],"names":["React","useState","useRef","useEffect","select","geoPath","geoMercator","min","max","scaleLinear","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","selectedState","setSelectedState","svg","current","width","height","getBoundingClientRect","console","log","projection","fitSize","precision","pathGenerator","selectAll","features","marginBottom"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,WAAjD,QAAoE,IAApE;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAlB,EAAsC;AAAA;;AACpC,QAAMC,MAAM,GAAGZ,MAAM,EAArB;AACA,QAAMa,UAAU,GAAGb,MAAM,EAAzB;AACA,QAAMc,UAAU,GAAGN,iBAAiB,CAACK,UAAD,CAApC;AAEA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,IAAD,CAAlD;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,GAAG,GAAGf,MAAM,CAACU,MAAM,CAACM,OAAR,CAAlB;AAEA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QACJN,UAAU,IAAID,UAAU,CAACK,OAAX,CAAmBG,qBAAnB,EADhB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBC,MAAnB;AAEA,UAAMI,UAAU,GAAGpB,WAAW,GAC3BqB,OADgB,CACR,CAACN,KAAD,EAAQC,MAAR,CADQ,EACSL,aAAa,IAAIL,IAD1B,EAEhBgB,SAFgB,CAEN,GAFM,CAAnB;AAIA,UAAMC,aAAa,GAAGxB,OAAO,GAAGqB,UAAV,CAAqBA,UAArB,CAAtB;AAEAP,IAAAA,GAAG,CAACW,SAAJ,CAAc,QAAd,EAAwBlB,IAAxB,CAA6BA,IAAI,CAACmB,QAAlC;AACD,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACE;AAAK,IAAA,GAAG,EAAEhB,UAAV;AAAsB,IAAA,KAAK,EAAE;AAAEiB,MAAAA,YAAY,EAAE;AAAhB,KAA7B;AAAA,2BACE;AAAK,MAAA,GAAG,EAAElB;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA7BQH,Q;UAGYD,iB;;;KAHZC,Q;AA+BT,eAAeA,QAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\r\nimport useResizeObserver from '../hooks/useResizeObserver';\r\n\r\nfunction GeoChart({ data, property }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n\r\n  const [selectedState, setSelectedState] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    const { width, height } =\r\n      dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n    console.log(width, height);\r\n\r\n    const projection = geoMercator()\r\n      .fitSize([width, height], selectedState || data)\r\n      .precision(100);\r\n\r\n    const pathGenerator = geoPath().projection(projection);\r\n\r\n    svg.selectAll('.state').data(data.features);\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={wrapperRef} style={{ marginBottom: '2rem' }}>\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GeoChart;\r\n"]},"metadata":{},"sourceType":"module"}