{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AAVAIG\\\\Desktop\\\\EY-Techathon-2\\\\Frontend\\\\src\\\\components\\\\maps\\\\PieChart\\\\PieChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Chart from 'react-google-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PieChart(_ref) {\n  _s();\n\n  let {\n    forestDataObject\n  } = _ref;\n  const [selectedYear, setSelectedYear] = useState(2019);\n  const [selectedIndex, setSelectedIndex] = useState(16);\n\n  const calculate = val => val / 3287469 * 100;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflow: 'hidden',\n      height: '100%'\n    },\n    children: forestDataObject.length !== 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forest-data-selector\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedIndex,\n          onChange: e => {\n            console.log(e.target.value);\n            setSelectedIndex(e.target.value);\n          },\n          children: forestDataObject.map((val, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: idx,\n            children: forestDataObject[idx].year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        width: '100%',\n        height: '100%',\n        chartType: \"PieChart\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this),\n        data: [['Forest Cover', '%Cover'], ['VDC', calculate(forestDataObject[selectedIndex]['VDC'])], ['MDC', calculate(forestDataObject[selectedIndex]['MDC'])], ['MFC', calculate(forestDataObject[selectedIndex]['MFC'])], ['OFA', calculate(forestDataObject[selectedIndex]['OFA'])], ['SLA', calculate(forestDataObject[selectedIndex]['SLA'])]],\n        options: {\n          // title: 'Forest Cover of 2019',\n          // Just add this option\n          title: 'Distribution of Types of Land Cover',\n          // legend: 'non',\n          //   is3D: true,\n          slices: {\n            0: {\n              color: '#FEBA69'\n            },\n            1: {\n              color: '#FF718B'\n            },\n            2: {\n              color: '#999'\n            },\n            3: {\n              color: '#8675FF'\n            },\n            4: {\n              color: '#69FFBB'\n            }\n          },\n          pieSliceTextStyle: {\n            color: 'black'\n          },\n          backgroundColor: 'transparent',\n          chartArea: {\n            width: '60%',\n            height: '60%'\n          },\n          legend: {\n            position: 'bottom'\n          }\n        },\n        rootProps: {\n          'data-testid': '2'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PieChart, \"Q9AyghldE4duFi5Inepm8hGM+jo=\");\n\n_c = PieChart;\nexport default PieChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"sources":["C:/Users/AAVAIG/Desktop/EY-Techathon-2/Frontend/src/components/maps/PieChart/PieChart.js"],"names":["React","useState","Chart","PieChart","forestDataObject","selectedYear","setSelectedYear","selectedIndex","setSelectedIndex","calculate","val","overflow","height","length","e","console","log","target","value","map","idx","year","title","slices","color","pieSliceTextStyle","backgroundColor","chartArea","width","legend","position"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Chart from 'react-google-charts';\r\n\r\nfunction PieChart({ forestDataObject }) {\r\n  const [selectedYear, setSelectedYear] = useState(2019);\r\n  const [selectedIndex, setSelectedIndex] = useState(16);\r\n\r\n  const calculate = (val) => (val / 3287469) * 100;\r\n\r\n  return (\r\n    <div style={{ overflow: 'hidden', height: '100%' }}>\r\n      {forestDataObject.length !== 0 && (\r\n        <>\r\n          <div className='forest-data-selector'>\r\n            <select\r\n              value={selectedIndex}\r\n              onChange={(e) => {\r\n                console.log(e.target.value);\r\n                setSelectedIndex(e.target.value);\r\n              }}\r\n            >\r\n              {forestDataObject.map((val, idx) => (\r\n                <option value={idx}>{forestDataObject[idx].year}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <Chart\r\n            width={'100%'}\r\n            height={'100%'}\r\n            chartType='PieChart'\r\n            loader={<div>Loading Chart</div>}\r\n            data={[\r\n              ['Forest Cover', '%Cover'],\r\n              ['VDC', calculate(forestDataObject[selectedIndex]['VDC'])],\r\n              ['MDC', calculate(forestDataObject[selectedIndex]['MDC'])],\r\n              ['MFC', calculate(forestDataObject[selectedIndex]['MFC'])],\r\n              ['OFA', calculate(forestDataObject[selectedIndex]['OFA'])],\r\n              ['SLA', calculate(forestDataObject[selectedIndex]['SLA'])],\r\n            ]}\r\n            options={{\r\n              // title: 'Forest Cover of 2019',\r\n              // Just add this option\r\n              title: 'Distribution of Types of Land Cover',\r\n              // legend: 'non',\r\n              //   is3D: true,\r\n              slices: {\r\n                0: { color: '#FEBA69' },\r\n                1: { color: '#FF718B' },\r\n                2: { color: '#999' },\r\n                3: { color: '#8675FF' },\r\n                4: { color: '#69FFBB' },\r\n              },\r\n              pieSliceTextStyle: {\r\n                color: 'black',\r\n              },\r\n              backgroundColor: 'transparent',\r\n              chartArea: {\r\n                width: '60%',\r\n                height: '60%',\r\n              },\r\n              legend: {\r\n                position: 'bottom',\r\n              },\r\n            }}\r\n            rootProps={{ 'data-testid': '2' }}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PieChart;\r\n"]},"metadata":{},"sourceType":"module"}