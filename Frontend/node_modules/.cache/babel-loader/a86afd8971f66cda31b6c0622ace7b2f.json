{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AAVAIG\\\\Desktop\\\\EY-Techathon-2\\\\Frontend\\\\src\\\\components\\\\maps\\\\LineChartJs\\\\LineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line as LineJS } from 'chart.js/auto';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LineChart = () => {\n  _s();\n\n  const [dataApi, setDataApi] = useState([]);\n  const [years, setYears] = useState([]);\n  const [forestCover, setForestCover] = useState([]); //   let years = [];\n  //   let forestCover = [];\n\n  const fetchData = async () => {\n    const response = await fetch('http://127.0.0.1:5000/', {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data.Data); // console.log(\n    //   data['Data'].forEach((year) => year['Total Forest Cover Area'])\n    // );\n    // for( in data.Data){\n    // }\n    // Object.keys(data.Data).forEach((year) =>\n    //   console.log(year['Total Forest Cover Area'])\n    // );\n\n    setYears(Object.keys(data.Data));\n    setForestCover(years.map(item => data.Data[item]['Total Forest Cover Area'])); // console.log(data.Data['2019']['Total Forest Cover Area']);\n\n    console.log(years);\n    console.log(forestCover);\n    setDataApi([data]); // setIndiaData([data]);\n  };\n\n  useEffect(() => {\n    fetchData()();\n  }, [forestCover]);\n\n  if (forestCover.length === 0 || years.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dataApi.length !== 0 && /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: years,\n          datasets: [{\n            label: '# of Votes',\n            data: forestCover,\n            backgroundColor: ['rgb(255, 99, 132)'],\n            // borderColor: [\n            //   'rgba(255, 99, 132, 1)',\n            //   'rgba(54, 162, 235, 1)',\n            //   'rgba(255, 206, 86, 1)',\n            //   'rgba(75, 192, 192, 1)',\n            //   'rgba(153, 102, 255, 1)',\n            //   'rgba(255, 159, 64, 1)',\n            // ],\n            borderWidth: 1\n          }]\n        },\n        height: 120,\n        width: 240,\n        options: {\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(LineChart, \"iSxQDlGJNfh7Lz6EfaXgdq8/8AM=\");\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["C:/Users/AAVAIG/Desktop/EY-Techathon-2/Frontend/src/components/maps/LineChartJs/LineChart.js"],"names":["React","useState","useEffect","Line","LineJS","LineChart","dataApi","setDataApi","years","setYears","forestCover","setForestCover","fetchData","response","fetch","headers","data","json","console","log","Data","Object","keys","map","item","length","labels","datasets","label","backgroundColor","borderWidth","maintainAspectRatio","scales","y","beginAtZero"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAI,IAAIC,MAAjB,QAA+B,eAA/B;AACA,SAASD,IAAT,QAAqB,iBAArB;;;AAEA,MAAME,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C,CAHsB,CAItB;AACA;;AAEA,QAAMW,SAAS,GAAG,YAAY;AAC5B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAD,EAA2B;AACrDC,MAAAA,OAAO,EAAE;AACP,uCAA+B,GADxB;AAEP,wBAAgB;AAFT;AAD4C,KAA3B,CAA5B;AAOA,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,IAAjB,EAT4B,CAW5B;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEAX,IAAAA,QAAQ,CAACY,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACI,IAAjB,CAAD,CAAR;AAEAT,IAAAA,cAAc,CACZH,KAAK,CAACe,GAAN,CAAWC,IAAD,IAAUR,IAAI,CAACI,IAAL,CAAUI,IAAV,EAAgB,yBAAhB,CAApB,CADY,CAAd,CAxB4B,CA4B5B;;AAEAN,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AAEAH,IAAAA,UAAU,CAAC,CAACS,IAAD,CAAD,CAAV,CAjC4B,CAmC5B;AACD,GApCD;;AAsCAd,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACF,WAAD,CAFM,CAAT;;AAIA,MAAIA,WAAW,CAACe,MAAZ,KAAuB,CAAvB,IAA4BjB,KAAK,CAACiB,MAAN,KAAiB,CAAjD,EAAoD;AAClD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAA,gBACGnB,OAAO,CAACmB,MAAR,KAAmB,CAAnB,iBACC,QAAC,IAAD;AACE,QAAA,IAAI,EAAE;AACJC,UAAAA,MAAM,EAAElB,KADJ;AAEJmB,UAAAA,QAAQ,EAAE,CACR;AACEC,YAAAA,KAAK,EAAE,YADT;AAEEZ,YAAAA,IAAI,EAAEN,WAFR;AAGEmB,YAAAA,eAAe,EAAE,CAAC,mBAAD,CAHnB;AAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,YAAAA,WAAW,EAAE;AAZf,WADQ;AAFN,SADR;AAoBE,QAAA,MAAM,EAAE,GApBV;AAqBE,QAAA,KAAK,EAAE,GArBT;AAsBE,QAAA,OAAO,EAAE;AACPC,UAAAA,mBAAmB,EAAE,KADd;AAEPC,UAAAA,MAAM,EAAE;AACNC,YAAAA,CAAC,EAAE;AACDC,cAAAA,WAAW,EAAE;AADZ;AADG;AAFD;AAtBX;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAqCD;AACF,CA1FD;;GAAM7B,S;;KAAAA,S;AA4FN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line as LineJS } from 'chart.js/auto';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst LineChart = () => {\r\n  const [dataApi, setDataApi] = useState([]);\r\n  const [years, setYears] = useState([]);\r\n  const [forestCover, setForestCover] = useState([]);\r\n  //   let years = [];\r\n  //   let forestCover = [];\r\n\r\n  const fetchData = async () => {\r\n    const response = await fetch('http://127.0.0.1:5000/', {\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(data.Data);\r\n\r\n    // console.log(\r\n    //   data['Data'].forEach((year) => year['Total Forest Cover Area'])\r\n    // );\r\n\r\n    // for( in data.Data){\r\n\r\n    // }\r\n    // Object.keys(data.Data).forEach((year) =>\r\n    //   console.log(year['Total Forest Cover Area'])\r\n    // );\r\n\r\n    setYears(Object.keys(data.Data));\r\n\r\n    setForestCover(\r\n      years.map((item) => data.Data[item]['Total Forest Cover Area'])\r\n    );\r\n\r\n    // console.log(data.Data['2019']['Total Forest Cover Area']);\r\n\r\n    console.log(years);\r\n    console.log(forestCover);\r\n\r\n    setDataApi([data]);\r\n\r\n    // setIndiaData([data]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData()();\r\n  }, [forestCover]);\r\n\r\n  if (forestCover.length === 0 || years.length === 0) {\r\n    return <div>Loading</div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        {dataApi.length !== 0 && (\r\n          <Line\r\n            data={{\r\n              labels: years,\r\n              datasets: [\r\n                {\r\n                  label: '# of Votes',\r\n                  data: forestCover,\r\n                  backgroundColor: ['rgb(255, 99, 132)'],\r\n                  // borderColor: [\r\n                  //   'rgba(255, 99, 132, 1)',\r\n                  //   'rgba(54, 162, 235, 1)',\r\n                  //   'rgba(255, 206, 86, 1)',\r\n                  //   'rgba(75, 192, 192, 1)',\r\n                  //   'rgba(153, 102, 255, 1)',\r\n                  //   'rgba(255, 159, 64, 1)',\r\n                  // ],\r\n                  borderWidth: 1,\r\n                },\r\n              ],\r\n            }}\r\n            height={120}\r\n            width={240}\r\n            options={{\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                y: {\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default LineChart;\r\n"]},"metadata":{},"sourceType":"module"}