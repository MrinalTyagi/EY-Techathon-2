{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AAVAIG\\\\Desktop\\\\EY-Techathon-2\\\\Frontend\\\\src\\\\components\\\\GeoChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from '../hooks/useResizeObserver';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart(_ref) {\n  _s();\n\n  let {\n    data,\n    property\n  } = _ref;\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null);\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect();\n    const projection = geoMercator().fitSize([width, height], selectedState || data).precision(100);\n    const pathGenerator = geoPath().projection(projection);\n    svg.selectAll('.state').data(data.features).join('path').on('click', (event, feature) => {\n      console.log(feature.properties['NAME_1']); // setSelectedState(selectedState === feature ? null : feature);\n    }).attr('class', 'state').attr('fill', '#eee').attr('transform', 'scale(.98)').transition().duration(2000).attr('d', feature => pathGenerator(feature));\n  }, [data, dimensions, selectedState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      paddingTop: '5px'\n    },\n    className: \"d-block w-100\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GeoChart, \"M8/BC/14RHXTy/s0xYRFWOmAROQ=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["C:/Users/AAVAIG/Desktop/EY-Techathon-2/Frontend/src/components/GeoChart.js"],"names":["React","useState","useRef","useEffect","select","geoPath","geoMercator","min","max","scaleLinear","useResizeObserver","Button","ButtonGroup","useNavigate","GeoChart","data","property","svgRef","wrapperRef","dimensions","selectedState","setSelectedState","svg","current","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","features","join","on","event","feature","console","log","properties","attr","transition","duration","paddingTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,WAAjD,QAAoE,IAApE;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,iBAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,SAASC,QAAT,OAAsC;AAAA;;AAAA,MAApB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAoB;AACpC,QAAMC,MAAM,GAAGf,MAAM,EAArB;AACA,QAAMgB,UAAU,GAAGhB,MAAM,EAAzB;AACA,QAAMiB,UAAU,GAAGT,iBAAiB,CAACQ,UAAD,CAApC;AAEA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCpB,QAAQ,CAAC,IAAD,CAAlD;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,GAAG,GAAGlB,MAAM,CAACa,MAAM,CAACM,OAAR,CAAlB;AAEA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QACJN,UAAU,IAAID,UAAU,CAACK,OAAX,CAAmBG,qBAAnB,EADhB;AAGA,UAAMC,UAAU,GAAGrB,WAAW,GAC3BsB,OADgB,CACR,CAACJ,KAAD,EAAQC,MAAR,CADQ,EACSL,aAAa,IAAIL,IAD1B,EAEhBc,SAFgB,CAEN,GAFM,CAAnB;AAIA,UAAMC,aAAa,GAAGzB,OAAO,GAAGsB,UAAV,CAAqBA,UAArB,CAAtB;AAEAL,IAAAA,GAAG,CACAS,SADH,CACa,QADb,EAEGhB,IAFH,CAEQA,IAAI,CAACiB,QAFb,EAGGC,IAHH,CAGQ,MAHR,EAIGC,EAJH,CAIM,OAJN,EAIe,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,UAAR,CAAmB,QAAnB,CAAZ,EAD+B,CAE/B;AACD,KAPH,EAQGC,IARH,CAQQ,OARR,EAQiB,OARjB,EASGA,IATH,CASQ,MATR,EASgB,MAThB,EAUGA,IAVH,CAUQ,WAVR,EAUqB,YAVrB,EAWGC,UAXH,GAYGC,QAZH,CAYY,IAZZ,EAaGF,IAbH,CAaQ,GAbR,EAacJ,OAAD,IAAaN,aAAa,CAACM,OAAD,CAbvC;AAcD,GA1BQ,EA0BN,CAACrB,IAAD,EAAOI,UAAP,EAAmBC,aAAnB,CA1BM,CAAT;AA4BA,sBACE;AACE,IAAA,GAAG,EAAEF,UADP;AAEE,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE,MAAzB;AAAiCkB,MAAAA,UAAU,EAAE;AAA7C,KAFT;AAGE,IAAA,SAAS,EAAC,eAHZ;AAAA,2BAKE;AAAK,MAAA,GAAG,EAAE1B;AAAV;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA5CQH,Q;UAGYJ,iB;;;KAHZI,Q;AA8CT,eAAeA,QAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\r\nimport useResizeObserver from '../hooks/useResizeObserver';\r\nimport { Button, ButtonGroup } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction GeoChart({ data, property }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n\r\n  const [selectedState, setSelectedState] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    const { width, height } =\r\n      dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n    const projection = geoMercator()\r\n      .fitSize([width, height], selectedState || data)\r\n      .precision(100);\r\n\r\n    const pathGenerator = geoPath().projection(projection);\r\n\r\n    svg\r\n      .selectAll('.state')\r\n      .data(data.features)\r\n      .join('path')\r\n      .on('click', (event, feature) => {\r\n        console.log(feature.properties['NAME_1']);\r\n        // setSelectedState(selectedState === feature ? null : feature);\r\n      })\r\n      .attr('class', 'state')\r\n      .attr('fill', '#eee')\r\n      .attr('transform', 'scale(.98)')\r\n      .transition()\r\n      .duration(2000)\r\n      .attr('d', (feature) => pathGenerator(feature));\r\n  }, [data, dimensions, selectedState]);\r\n\r\n  return (\r\n    <div\r\n      ref={wrapperRef}\r\n      style={{ width: '100%', height: '100%', paddingTop: '5px' }}\r\n      className='d-block w-100'\r\n    >\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GeoChart;\r\n"]},"metadata":{},"sourceType":"module"}