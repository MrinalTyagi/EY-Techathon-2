{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AAVAIG\\\\Desktop\\\\EY-Techathon-2\\\\Frontend\\\\src\\\\components\\\\maps\\\\lineChart\\\\LineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { select, line, scaleLinear, aaxisBottom, axisLeft } from 'd3'; // const d3 = require('d3');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LineChart(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //   const [indiaData, setIndiaData] = useState([]);\n  //   const data = [10, 20, 30, 40, 50];\n\n  useEffect(() => {\n    // console.log(data);\n    if (!data) return;\n    if (!data[0]) return;\n    const yearsArray = Object.keys(data[0].Data);\n    const indiaData = yearsArray.map(year => {\n      return {\n        key: year,\n        value: data[0].Data[year]\n      };\n    });\n    const svg = select(svgRef.current);\n    const xScale = scaleLinear().domain(data => data.map((val, idx) => val.key)).range([0, 150]);\n    const xAxis = axisBottom(xScale).ticks(data.length);\n    svg.select('.x-axis').style('transform', `translateY(150px)`).call(xAxis);\n    const yScale = scaleLinear().domain([0, 150]).range([150, 0]); // const myLine = line().x().y();\n\n    const myLine = line().x((value, idx) => value.key).y(value => value.value['Total Forest Cover Area']); // svg.selectAll('path').data([data]).join('path');\n\n    svg.selectAll('path').data(indiaData).join('path').attr('d', value => myLine(value)); //   .data([data])\n    //   .join('path')\n    //\n    // svg.selectAll('path').data(data[0].Data);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineChart, \"za1gr1JdDAr/YFsXWaqwIFMXIPA=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["C:/Users/AAVAIG/Desktop/EY-Techathon-2/Frontend/src/components/maps/lineChart/LineChart.js"],"names":["React","useState","useEffect","useRef","useResizeObserver","select","line","scaleLinear","aaxisBottom","axisLeft","LineChart","data","wrapperRef","svgRef","dimensions","yearsArray","Object","keys","Data","indiaData","map","year","key","value","svg","current","xScale","domain","val","idx","range","xAxis","axisBottom","ticks","length","style","call","yScale","myLine","x","y","selectAll","join","attr"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,WAAvB,EAAoCC,WAApC,EAAiDC,QAAjD,QAAiE,IAAjE,C,CACA;;;;AAEA,SAASC,SAAT,OAA6B;AAAA;;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAC3B,QAAMC,UAAU,GAAGT,MAAM,EAAzB;AACA,QAAMU,MAAM,GAAGV,MAAM,EAArB;AACA,QAAMW,UAAU,GAAGV,iBAAiB,CAACQ,UAAD,CAApC,CAH2B,CAI3B;AAEA;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd;AAEA,QAAI,CAACS,IAAL,EAAW;AAEX,QAAI,CAACA,IAAI,CAAC,CAAD,CAAT,EAAc;AAEd,UAAMI,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYN,IAAI,CAAC,CAAD,CAAJ,CAAQO,IAApB,CAAnB;AAEA,UAAMC,SAAS,GAAGJ,UAAU,CAACK,GAAX,CAAgBC,IAAD,IAAU;AACzC,aAAO;AAAEC,QAAAA,GAAG,EAAED,IAAP;AAAaE,QAAAA,KAAK,EAAEZ,IAAI,CAAC,CAAD,CAAJ,CAAQO,IAAR,CAAaG,IAAb;AAApB,OAAP;AACD,KAFiB,CAAlB;AAIA,UAAMG,GAAG,GAAGnB,MAAM,CAACQ,MAAM,CAACY,OAAR,CAAlB;AAEA,UAAMC,MAAM,GAAGnB,WAAW,GACvBoB,MADY,CACJhB,IAAD,IAAUA,IAAI,CAACS,GAAL,CAAS,CAACQ,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACN,GAA3B,CADL,EAEZQ,KAFY,CAEN,CAAC,CAAD,EAAI,GAAJ,CAFM,CAAf;AAIA,UAAMC,KAAK,GAAGC,UAAU,CAACN,MAAD,CAAV,CAAmBO,KAAnB,CAAyBtB,IAAI,CAACuB,MAA9B,CAAd;AACAV,IAAAA,GAAG,CAACnB,MAAJ,CAAW,SAAX,EAAsB8B,KAAtB,CAA4B,WAA5B,EAA0C,mBAA1C,EAA8DC,IAA9D,CAAmEL,KAAnE;AAEA,UAAMM,MAAM,GAAG9B,WAAW,GAAGoB,MAAd,CAAqB,CAAC,CAAD,EAAI,GAAJ,CAArB,EAA+BG,KAA/B,CAAqC,CAAC,GAAD,EAAM,CAAN,CAArC,CAAf,CAtBc,CAwBd;;AACA,UAAMQ,MAAM,GAAGhC,IAAI,GAChBiC,CADY,CACV,CAAChB,KAAD,EAAQM,GAAR,KAAgBN,KAAK,CAACD,GADZ,EAEZkB,CAFY,CAETjB,KAAD,IAAWA,KAAK,CAACA,KAAN,CAAY,yBAAZ,CAFD,CAAf,CAzBc,CA6Bd;;AAEAC,IAAAA,GAAG,CACAiB,SADH,CACa,MADb,EAEG9B,IAFH,CAEQQ,SAFR,EAGGuB,IAHH,CAGQ,MAHR,EAIGC,IAJH,CAIQ,GAJR,EAIcpB,KAAD,IAAWe,MAAM,CAACf,KAAD,CAJ9B,EA/Bc,CAoCd;AACA;AACA;AACA;AACD,GAxCQ,EAwCN,CAACZ,IAAD,CAxCM,CAAT;AA0CA,sBACE;AAAK,IAAA,GAAG,EAAEC,UAAV;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEC;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAvDQH,S;UAGYN,iB;;;KAHZM,S;AAyDT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport useResizeObserver from '../../../hooks/useResizeObserver';\r\nimport { select, line, scaleLinear, aaxisBottom, axisLeft } from 'd3';\r\n// const d3 = require('d3');\r\n\r\nfunction LineChart({ data }) {\r\n  const wrapperRef = useRef();\r\n  const svgRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n  //   const [indiaData, setIndiaData] = useState([]);\r\n\r\n  //   const data = [10, 20, 30, 40, 50];\r\n\r\n  useEffect(() => {\r\n    // console.log(data);\r\n\r\n    if (!data) return;\r\n\r\n    if (!data[0]) return;\r\n\r\n    const yearsArray = Object.keys(data[0].Data);\r\n\r\n    const indiaData = yearsArray.map((year) => {\r\n      return { key: year, value: data[0].Data[year] };\r\n    });\r\n\r\n    const svg = select(svgRef.current);\r\n\r\n    const xScale = scaleLinear()\r\n      .domain((data) => data.map((val, idx) => val.key))\r\n      .range([0, 150]);\r\n\r\n    const xAxis = axisBottom(xScale).ticks(data.length);\r\n    svg.select('.x-axis').style('transform', `translateY(150px)`).call(xAxis);\r\n\r\n    const yScale = scaleLinear().domain([0, 150]).range([150, 0]);\r\n\r\n    // const myLine = line().x().y();\r\n    const myLine = line()\r\n      .x((value, idx) => value.key)\r\n      .y((value) => value.value['Total Forest Cover Area']);\r\n\r\n    // svg.selectAll('path').data([data]).join('path');\r\n\r\n    svg\r\n      .selectAll('path')\r\n      .data(indiaData)\r\n      .join('path')\r\n      .attr('d', (value) => myLine(value));\r\n    //   .data([data])\r\n    //   .join('path')\r\n    //\r\n    // svg.selectAll('path').data(data[0].Data);\r\n  }, [data]);\r\n\r\n  return (\r\n    <div ref={wrapperRef}>\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineChart;\r\n"]},"metadata":{},"sourceType":"module"}