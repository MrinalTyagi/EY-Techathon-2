{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AAVAIG\\\\Documents\\\\webd\\\\aavaig-projects\\\\ey_techathon-2\\\\ey-website\\\\src\\\\components\\\\GeoChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from '../hooks/useResizeObserver';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedState, setSelectedState] = useState(null);\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect();\n    const projection = geoMercator().fitSize([width, height], selectedState || data).precision(100);\n    const pathGenerator = geoPath().projection(projection);\n    svg.selectAll('.state').data(data.features).join('path').on('click', (event, feature) => {\n      setSelectedState(selectedState === feature ? null : feature);\n    }).attr('class', 'state').attr('fill', '#eee').attr('transform', 'scale(.98)').transition().duration(2000).attr('d', feature => pathGenerator(feature));\n  }, [data, dimensions, selectedState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      paddingTop: '5px'\n    },\n    className: \"d-block w-100\",\n    children: [/*#__PURE__*/_jsxDEV(ButtonGroup, {\n      \"aria-label\": \"Basic example\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        children: \"Sat. View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GeoChart, \"M8/BC/14RHXTy/s0xYRFWOmAROQ=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = GeoChart;\nexport default GeoChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoChart\");","map":{"version":3,"sources":["C:/Users/AAVAIG/Documents/webd/aavaig-projects/ey_techathon-2/ey-website/src/components/GeoChart.js"],"names":["React","useState","useRef","useEffect","select","geoPath","geoMercator","min","max","scaleLinear","useResizeObserver","Button","ButtonGroup","GeoChart","data","property","svgRef","wrapperRef","dimensions","selectedState","setSelectedState","svg","current","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","features","join","on","event","feature","attr","transition","duration","paddingTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,WAAjD,QAAoE,IAApE;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,iBAApC;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAlB,EAAsC;AAAA;;AACpC,QAAMC,MAAM,GAAGd,MAAM,EAArB;AACA,QAAMe,UAAU,GAAGf,MAAM,EAAzB;AACA,QAAMgB,UAAU,GAAGR,iBAAiB,CAACO,UAAD,CAApC;AAEA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC,IAAD,CAAlD;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,GAAG,GAAGjB,MAAM,CAACY,MAAM,CAACM,OAAR,CAAlB;AAEA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QACJN,UAAU,IAAID,UAAU,CAACK,OAAX,CAAmBG,qBAAnB,EADhB;AAGA,UAAMC,UAAU,GAAGpB,WAAW,GAC3BqB,OADgB,CACR,CAACJ,KAAD,EAAQC,MAAR,CADQ,EACSL,aAAa,IAAIL,IAD1B,EAEhBc,SAFgB,CAEN,GAFM,CAAnB;AAIA,UAAMC,aAAa,GAAGxB,OAAO,GAAGqB,UAAV,CAAqBA,UAArB,CAAtB;AAEAL,IAAAA,GAAG,CACAS,SADH,CACa,QADb,EAEGhB,IAFH,CAEQA,IAAI,CAACiB,QAFb,EAGGC,IAHH,CAGQ,MAHR,EAIGC,EAJH,CAIM,OAJN,EAIe,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC/Bf,MAAAA,gBAAgB,CAACD,aAAa,KAAKgB,OAAlB,GAA4B,IAA5B,GAAmCA,OAApC,CAAhB;AACD,KANH,EAOGC,IAPH,CAOQ,OAPR,EAOiB,OAPjB,EAQGA,IARH,CAQQ,MARR,EAQgB,MARhB,EASGA,IATH,CASQ,WATR,EASqB,YATrB,EAUGC,UAVH,GAWGC,QAXH,CAWY,IAXZ,EAYGF,IAZH,CAYQ,GAZR,EAYcD,OAAD,IAAaN,aAAa,CAACM,OAAD,CAZvC;AAaD,GAzBQ,EAyBN,CAACrB,IAAD,EAAOI,UAAP,EAAmBC,aAAnB,CAzBM,CAAT;AA2BA,sBACE;AACE,IAAA,GAAG,EAAEF,UADP;AAEE,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE,MAAzB;AAAiCe,MAAAA,UAAU,EAAE;AAA7C,KAFT;AAGE,IAAA,SAAS,EAAC,eAHZ;AAAA,4BAKE,QAAC,WAAD;AAAa,oBAAW,eAAxB;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eASE;AAAK,MAAA,GAAG,EAAEvB;AAAV;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA/CQH,Q;UAGYH,iB;;;KAHZG,Q;AAiDT,eAAeA,QAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\r\nimport useResizeObserver from '../hooks/useResizeObserver';\r\nimport { Button, ButtonGroup } from 'react-bootstrap';\r\n\r\nfunction GeoChart({ data, property }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n\r\n  const [selectedState, setSelectedState] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    const { width, height } =\r\n      dimensions || wrapperRef.current.getBoundingClientRect();\r\n\r\n    const projection = geoMercator()\r\n      .fitSize([width, height], selectedState || data)\r\n      .precision(100);\r\n\r\n    const pathGenerator = geoPath().projection(projection);\r\n\r\n    svg\r\n      .selectAll('.state')\r\n      .data(data.features)\r\n      .join('path')\r\n      .on('click', (event, feature) => {\r\n        setSelectedState(selectedState === feature ? null : feature);\r\n      })\r\n      .attr('class', 'state')\r\n      .attr('fill', '#eee')\r\n      .attr('transform', 'scale(.98)')\r\n      .transition()\r\n      .duration(2000)\r\n      .attr('d', (feature) => pathGenerator(feature));\r\n  }, [data, dimensions, selectedState]);\r\n\r\n  return (\r\n    <div\r\n      ref={wrapperRef}\r\n      style={{ width: '100%', height: '100%', paddingTop: '5px' }}\r\n      className='d-block w-100'\r\n    >\r\n      <ButtonGroup aria-label='Basic example'>\r\n        <Button variant='secondary'>Normal View</Button>\r\n        <Button variant='secondary'>Sat. View</Button>\r\n      </ButtonGroup>\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GeoChart;\r\n"]},"metadata":{},"sourceType":"module"}